
import java.io.*;
import java.util.*;
import java.text.*;
import java.util.concurrent.TimeUnit;

public class EventManagement {

    private String startDateString;
    private String endDateString;
    private String startTimeString;
    private String endTimeString;
    private String venue;
    private String industry;
    private String title;
    private int eventCount;
    private String eventID;

    public EventManagement() {
        if (!eventCounterFileExists()) {
            createEventCounterFile(1);
        }
        initializeEventCount();
    }

    public EventManagement(String industryCode) {
        if (!eventCounterFileExists()) {
            createEventCounterFile(1);
        }
        initializeEventCount();
    }

    public String getStartDateString() {
        return startDateString;
    }

    public void setStartDateString(String startDateString) {
        this.startDateString = startDateString;
    }

    public String getEndDateString() {
        return endDateString;
    }

    public void setEndDateString(String endDateString) {
        this.endDateString = endDateString;
    }

    public String getStartTimeString() {
        return startTimeString;
    }

    public void setStartTimeString(String startTimeString) {
        this.startTimeString = startTimeString;
    }

    public String getEndTimeString() {
        return endTimeString;
    }

    public void setEndTimeString(String endTimeString) {
        this.endTimeString = endTimeString;
    }

    public String getVenue() {
        return venue;
    }

    public void setVenue(String venue) {
        this.venue = venue;
    }

    public String getIndustry() {
        return industry;
    }

    public String getTitle() {
        return title;
    }

    public void setTitle(String title) {
        this.title = title;
        eventCount++;
    }

    public int getEventCount() {
        return eventCount;
    }

    public SimpleDateFormat getDateFormat() {
        return dateFormat;
    }

    public void setDateFormat(SimpleDateFormat dateFormat) {
        this.dateFormat = dateFormat;
    }

    public SimpleDateFormat getTimeFormat() {
        return timeFormat;
    }

    public void setTimeFormat(SimpleDateFormat timeFormat) {
        this.timeFormat = timeFormat;
    }

    public Date getStartTime() {
        return startTime;
    }

    public void setStartTime(Date startTime) {
        this.startTime = startTime;
    }

    public Date getEndTime() {
        return endTime;
    }

    public void setEndTime(Date endTime) {
        this.endTime = endTime;
    }

    public String getActivityStartTime() {
        return activityStartTime;
    }

    public void setActivityStartTime(String activityStartTime) {
        this.activityStartTime = activityStartTime;
    }

    public String getActivityEndTime() {
        return activityEndTime;
    }

    public void setActivityEndTime(String activityEndTime) {
        this.activityEndTime = activityEndTime;
    }

    public void setEventId(String eventID) {
        this.eventID = eventID;
    }

    public String getEventId() {
        return eventID;
    }

    private boolean eventCounterFileExists() {
        File eventCounterFile = new File("eventCounter.txt");
        return eventCounterFile.exists();
    }

    private void createEventCounterFile(int initialValue) {
        try (BufferedWriter writer = new BufferedWriter(new FileWriter("eventCounter.txt"))) {
            writer.write(Integer.toString(initialValue));
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private int readEventCountFromFile() {
        try (BufferedReader reader = new BufferedReader(new FileReader("eventCounter.txt"))) {
            String line = reader.readLine();
            if (line != null) {
                return Integer.parseInt(line);
            }
        } catch (IOException | NumberFormatException e) {
            e.printStackTrace();
        }
        return 1; // Default event count if file doesn't exist or is corrupted
    }

    private void writeEventCountToFile(int eventCount) {
        try (BufferedWriter writer = new BufferedWriter(new FileWriter("eventCounter.txt"))) {
            writer.write(Integer.toString(eventCount));
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    public void saveEventToFile() {
        int currentEventCount = readEventCountFromFile();

        // Check if the industry code is set (assuming it's a non-empty string)
        if (industry != null && !industry.isEmpty()) {
            String industryCode;

            // Convert the industry to an industry code
            switch (industry) {
                case "Food and Beverage":
                    industryCode = "FB";
                    break;
                case "Technology and Electronics":
                    industryCode = "TE";
                    break;
                case "Tourism and Travel":
                    industryCode = "TT";
                    break;
                case "Houseware and Home Products":
                    industryCode = "HH";
                    break;
                case "Fashion and Apparel":
                    industryCode = "FA";
                    break;
                default:
                    industryCode = "UNK"; // Unknown industry code
                    break;
            }

            String eventFileName = industryCode + currentEventCount + ".txt";

            // Check if the event file already exists
            File eventFile = new File(eventFileName);
            if (eventFile.exists()) {
                System.out.println("Event file " + eventFileName + " already exists. Please choose a different event title.");
                return;
            }

            try (FileWriter writer = new FileWriter(eventFileName)) {
                writer.write(toString());
                System.out.println("Event details saved to " + eventFileName);

                // Increment event count and update the eventCounter.txt file
                currentEventCount++;
                writeEventCountToFile(currentEventCount);
            } catch (IOException e) {
                System.out.println("Failed to save event details to file.");
            }
        } else {
            System.out.println("Industry is not set. Please set the industry before saving the event.");
        }
    }

    public void setIndustry(String industry) {
        this.industry = industry;
    }

    public void initializeEventCount() {
        eventCount = readEventCountFromFile();
    }

    private SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
    private SimpleDateFormat timeFormat = new SimpleDateFormat("HHmm");
    private Date startTime = null;
    private Date endTime = null;
    private String activityStartTime;
    private String activityEndTime;

    public void mainMenu() {
        System.out.println("\n\t\tWelcome Admin!!!\n");
        System.out.println("1.Create Event");
        System.out.println("2.View Event");
        System.out.println("3.Modify Event");
        System.out.println("4.Delete Event");
        System.out.println("5.Update Profile");
        System.out.println("6.Logout\n");
        System.out.print("Enter your selection(1 - 6): ");
    }

    public void industryMenu() {
        System.out.println("\n1.Food and Beverage");
        System.out.println("2.Technology and Electronics");
        System.out.println("3.Tourism and Travel");
        System.out.println("4.Houseware and Home Products");
        System.out.println("5.Fashion and Apparel");
        System.out.print("Enter industry(1 - 5): ");
    }

    public boolean validateDate(String startDateString, String endDateString) {
        try {
            Date startDate = getDateFormat().parse(startDateString);
            Date endDate = getDateFormat().parse(endDateString);

            // Get the current date
            Date currentDate = new Date();

            // Calculate the difference in days between the parsed start date and the current date
            long diffInDaysStart = TimeUnit.DAYS.convert(startDate.getTime() - currentDate.getTime(), TimeUnit.MILLISECONDS);

            // Calculate the difference in days between the parsed end date and the start date
            long diffInDaysEnd = TimeUnit.DAYS.convert(endDate.getTime() - startDate.getTime(), TimeUnit.MILLISECONDS);

            if (diffInDaysStart >= 2 && diffInDaysEnd >= 0) {
                setStartDateString(startDateString);
                setEndDateString(endDateString);
                return true;
            } else {
                System.out.println("Invalid date. The start date must be at least 3 days more than the current date, "
                        + "and the end date must be the same as or later than the start date.");
                return false;
            }
        } catch (ParseException e) {
            System.out.println("Invalid date format. Please use yyyy-MM-dd.");
            return false;
        }
    }

    public boolean validateTime(String startTimeString, String endTimeString) {
        try {
            getTimeFormat().setLenient(false); // Disallow lenient parsing
            setStartTime(getTimeFormat().parse(startTimeString));
            setEndTime(getTimeFormat().parse(endTimeString));

            // Check if the end time is greater than the start time
            if (getEndTime().after(getStartTime())) {
                setStartTimeString(startTimeString);
                setEndTimeString(endTimeString);
                return true;
            } else {
                System.out.println("Ending time must be greater than starting time.\n");
                return false;
            }
        } catch (ParseException e) {
            System.out.println("Invalid time format. Please use 24-hour format.\n");
            return false;
        }
    }

    public boolean validateAlpha(String input) {
        if (!input.matches("^[a-zA-Z]+$")) {
            System.out.println("Invalid input. Please use only alphabetic characters.\n");
            return false;
        } else {
            return true;
        }
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("\nEvent Details:\n");
        sb.append("Event ID: ").append(getEventId()).append("\n");
        sb.append("Title: ").append(getTitle()).append("\n");
        sb.append("Date: ").append(getStartDateString()).append(" to ").append(getEndDateString()).append("\n");
        sb.append("Time: ").append(getStartTimeString()).append(" to ").append(getEndTimeString()).append("\n");
        sb.append("Venue: ").append(getVenue()).append("\n");
        sb.append("Industry: ").append(getIndustry()).append("\n");
        // Add more details here if needed
        return sb.toString();
    }

}
