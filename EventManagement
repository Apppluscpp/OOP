
import java.io.*;
import java.util.*;
import java.text.*;
import java.util.concurrent.TimeUnit;

public class EventManagement {

    private String startDateString;
    private String endDateString;
    private String startTimeString;
    private String endTimeString;
    private String venue;
    private String industry;
    private String title;
    private int eventCount;
    private String eventID;
    private boolean valid;
    private String eventId;

    Scanner scanner = new Scanner(System.in);

    public EventManagement() {
        if (!eventCounterFileExists()) {
            createEventCounterFile(1);
        }
        initializeEventCount();
    }

    public EventManagement(String industryCode) {
        if (!eventCounterFileExists()) {
            createEventCounterFile(1);
        }
        initializeEventCount();
    }

    public String getStartDateString() {
        return startDateString;
    }

    public void setStartDateString(String startDateString) {
        this.startDateString = startDateString;
    }

    public String getEndDateString() {
        return endDateString;
    }

    public void setEndDateString(String endDateString) {
        this.endDateString = endDateString;
    }

    public String getStartTimeString() {
        return startTimeString;
    }

    public void setStartTimeString(String startTimeString) {
        this.startTimeString = startTimeString;
    }

    public String getEndTimeString() {
        return endTimeString;
    }

    public void setEndTimeString(String endTimeString) {
        this.endTimeString = endTimeString;
    }

    public String getVenue() {
        return venue;
    }

    public String getIndustry() {
        return industry;
    }

    public String getTitle() {
        return title;
    }

    public int getEventCount() {
        return eventCount;
    }

    public SimpleDateFormat getDateFormat() {
        return dateFormat;
    }

    public void setDateFormat(SimpleDateFormat dateFormat) {
        this.dateFormat = dateFormat;
    }

    public SimpleDateFormat getTimeFormat() {
        return timeFormat;
    }

    public void setTimeFormat(SimpleDateFormat timeFormat) {
        this.timeFormat = timeFormat;
    }

    public Date getStartTime() {
        return startTime;
    }

    public void setStartTime(Date startTime) {
        this.startTime = startTime;
    }

    public Date getEndTime() {
        return endTime;
    }

    public void setEndTime(Date endTime) {
        this.endTime = endTime;
    }

    public String getActivityStartTime() {
        return activityStartTime;
    }

    public void setActivityStartTime(String activityStartTime) {
        this.activityStartTime = activityStartTime;
    }

    public String getActivityEndTime() {
        return activityEndTime;
    }

    public void setActivityEndTime(String activityEndTime) {
        this.activityEndTime = activityEndTime;
    }

    public void setEventId(String eventID) {
        this.eventID = eventID;
    }

    public String getEventId() {
        return eventID;
    }

    private boolean eventCounterFileExists() {
        File eventCounterFile = new File("eventCounter.txt");
        return eventCounterFile.exists();
    }

    private void createEventCounterFile(int initialValue) {
        try (BufferedWriter writer = new BufferedWriter(new FileWriter("eventCounter.txt"))) {
            writer.write(Integer.toString(initialValue));
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private int readEventCountFromFile() {
        try (BufferedReader reader = new BufferedReader(new FileReader("eventCounter.txt"))) {
            String line = reader.readLine();
            if (line != null) {
                return Integer.parseInt(line);
            }
        } catch (IOException | NumberFormatException e) {
            e.printStackTrace();
        }
        return 1; // Default event count if file doesn't exist or is corrupted
    }

    private void writeEventCountToFile(int eventCount) {
        try (BufferedWriter writer = new BufferedWriter(new FileWriter("eventCounter.txt"))) {
            writer.write(Integer.toString(eventCount));
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    public String validateEventFile() {
        valid = false;
        do {
            System.out.print("Enter event ID: ");
            eventId = scanner.next();

            int eventNumber = extractEventNumber(eventId);

            // Define the filename based on the eventID
            String eventFileName = "Event" + eventNumber + ".txt";

            File eventFile = new File(eventFileName);
            if (!eventFile.exists()) {
                System.out.println("Event file with ID " + eventId + " does not exist. Please enter a valid event ID.");
            } else {
                valid = true;
            }
        } while (!valid);
        return eventId;
    }

    public void saveEventToFile() {
        int currentEventCount = readEventCountFromFile();

        // Update the eventCount before setting the eventId and eventFileName
        currentEventCount++;

        setEventId("EVT" + currentEventCount);

        String eventFileName = "Event" + currentEventCount + ".txt";

        // Check if the event file already exists
        File eventFile = new File(eventFileName);
        if (eventFile.exists()) {
            System.out.println("Event file " + eventFileName + " already exists. Please choose a different event title.");
            return;
        }

        try (FileWriter writer = new FileWriter(eventFileName)) {
            writer.write(toString());
            // Increment event count and update the eventCounter.txt file
            currentEventCount++;
            writeEventCountToFile(currentEventCount);
            System.out.println("\nEvent details saved to " + eventFileName);

        } catch (IOException e) {
            System.out.println("Failed to save event details to file.");
        }

    }

    public void initializeEventCount() {
        eventCount = readEventCountFromFile();
    }

    public void update(String eventId) {
        int choice;
        // Define keywords to search for based on the choice
        String[] keywords = {
            "Date",
            "Time",
            "Venue",
            "Industry",
            "Title"
        };

        // Validate choice
        valid = false;
        do {
            updateMenu();
            choice = scanner.nextInt();
            if (choice < 1 || choice > keywords.length) {
                System.out.println("Invalid choice. Please enter again.");
            } else {
                valid = true;
            }
        } while (!valid);

        int eventNumber = extractEventNumber(eventId);

        String eventFileName = "Event" + eventNumber + ".txt";

        try (BufferedReader fileReader = new BufferedReader(new FileReader(eventFileName))) {
            // Read the file contents into a list of lines
            List<String> lines = new ArrayList<>();
            String line;
            while ((line = fileReader.readLine()) != null) {
                lines.add(line);
            }

            // Find and remove the line with the specified keyword
            String keyword = keywords[choice - 1];
            List<Integer> linesToUpdate = new ArrayList<>(); // Store the line numbers to update

            for (int i = 0; i < lines.size(); i++) {
                if (lines.get(i).contains(keyword)) {
                    linesToUpdate.add(i); // Add the line number to the list of lines to update
                }
            }
            boolean valid = false;
            // Prompt the user for the new value
            String newValue = "";
            if (keyword == "Industry") {
                setIndustry();
                newValue = industry;
            } else if (keyword == "Date") {
                do {
                    System.out.print("Enter starting date (yyyy-MM-dd): ");
                    startDateString = scanner.next();
                    System.out.print("Enter ending date (yyyy-MM-dd): ");
                    endDateString = scanner.next();

                    valid = validateDate(startDateString, endDateString);

                } while (!valid);
                newValue = startDateString + " to " + endDateString;

            } else if (keyword == "Time") {
                do {
                    System.out.print("Enter starting time (24-hour format): ");
                    startTimeString = scanner.next();
                    System.out.print("Enter ending time (24-hour format): ");
                    endTimeString = scanner.next();

                    valid = validateTime(startTimeString, endTimeString);
                } while (!valid);
                newValue = startTimeString + " to " + endTimeString;
            } else {
                String text;
                do {
                    System.out.print("Enter the new " + keyword + ": ");
                    text = scanner.next().trim();
                    valid = validateAlpha(text);
                } while (!valid);
                newValue = text;
            }

            // Update the lines in the list
            for (Integer lineIndex : linesToUpdate) {
                lines.set(lineIndex, keyword + ": " + newValue);
            }

            // Write the updated list of lines back to the file
            try (BufferedWriter fileWriter = new BufferedWriter(new FileWriter(eventFileName))) {
                for (String updated : lines) {
                    fileWriter.write(updated);
                    fileWriter.newLine();
                }
                System.out.println(keyword + " updated successfully.");
            } catch (IOException e) {
                e.printStackTrace();
                System.out.println("Failed to update the event file.");
            }

            // Close the fileReader before renaming
            fileReader.close();

        } catch (IOException e) {
            e.printStackTrace();
            System.out.println("Failed to update the event file.");
        }
        System.out.println("Event update failed.");
    }

    private int extractEventNumber(String eventId) {
        // Extract and parse the event number from the event ID
        String numberStr = eventId.replaceAll("\\D+", "");
        try {
            return Integer.parseInt(numberStr);
        } catch (NumberFormatException e) {
            // Handle parsing error, e.g., if the eventId doesn't contain a valid number
            return -1; // You can choose an appropriate default or error value
        }
    }

    public void setVenue() {
        do {
            System.out.print("Enter venue (Alphabetic characters only): ");
            venue = scanner.next().trim();
            valid = validateAlpha(venue);
        } while (!valid);

        this.venue = venue;
    }

    public void setTitle() {
        do {
            System.out.print("Enter title (Alphabetic characters only): ");
            title = scanner.next().trim();
            valid = validateAlpha(title);
        } while (!valid);
        this.title = title;
    }

    public void setIndustry() {
        do {
            try {
                industryMenu();
                int industryChoice = scanner.nextInt();
                scanner.nextLine();
                switch (industryChoice) {
                    case 1:
                        industry = "Food and Beverage";
                        break;
                    case 2:
                        industry = "Technology and Electronics";
                        break;
                    case 3:
                        industry = "Tourism and Travel";
                        break;
                    case 4:
                        industry = "Houseware and Home Products";
                        break;
                    case 5:
                        industry = "Fashion and Apparel";
                        break;
                    default:
                        System.out.println("Please enter 1 - 5 only");
                        break;
                }
            } catch (InputMismatchException e) {
                System.out.println("Invalid input. Please enter an integer only.");
                scanner.nextLine();
            }
        } while (industry.isEmpty());
        this.industry = industry;
    }

    public void deleteEvent(String eventId) {
        String eventFileName = eventId + ".txt";
        File eventFile = new File(eventFileName);
        if (eventFile.delete()) {
            System.out.println("Event with ID " + eventId + " has been deleted.");
        } else {
            System.out.println("Failed to delete the event file with ID " + eventId);
        }
    }

    private SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
    private SimpleDateFormat timeFormat = new SimpleDateFormat("HHmm");
    private Date startTime = null;
    private Date endTime = null;
    private String activityStartTime;
    private String activityEndTime;

    public void mainMenu() {
        System.out.println("\n\t\tWelcome Admin!!!\n");
        System.out.println("1.Create Event");
        System.out.println("2.View Event");
        System.out.println("3.Search Event");
        System.out.println("4.Update Event");
        System.out.println("5.Delete Event");
        System.out.println("6.Update Profile");
        System.out.println("7.Logout\n");
        System.out.print("Enter your selection(1 - 6): ");
    }

    public void industryMenu() {
        System.out.println("\n1.Food and Beverage");
        System.out.println("2.Technology and Electronics");
        System.out.println("3.Tourism and Travel");
        System.out.println("4.Houseware and Home Products");
        System.out.println("5.Fashion and Apparel");
        System.out.print("Enter industry(1 - 5): ");
    }

    public void updateMenu() {
        System.out.println("\n1.Date");
        System.out.println("2.Time");
        System.out.println("3.Venue");
        System.out.println("4.Industry");
        System.out.println("5.Title");
        System.out.print("Enter selection(1 - 5): ");
    }

    public boolean validateDate(String startDateString, String endDateString) {
        try {
            Date startDate = getDateFormat().parse(startDateString);
            Date endDate = getDateFormat().parse(endDateString);

            // Get the current date
            Date currentDate = new Date();

            // Calculate the difference in days between the parsed start date and the current date
            long diffInDaysStart = TimeUnit.DAYS.convert(startDate.getTime() - currentDate.getTime(), TimeUnit.MILLISECONDS);

            // Calculate the difference in days between the parsed end date and the start date
            long diffInDaysEnd = TimeUnit.DAYS.convert(endDate.getTime() - startDate.getTime(), TimeUnit.MILLISECONDS);

            if (diffInDaysStart >= 2 && diffInDaysEnd >= 0) {
                setStartDateString(startDateString);
                setEndDateString(endDateString);
                return true;
            } else {
                System.out.println("Invalid date. The start date must be at least 3 days more than the current date, "
                        + "and the end date must be the same as or later than the start date.");
                return false;
            }
        } catch (ParseException e) {
            System.out.println("Invalid date format. Please use yyyy-MM-dd.");
            return false;
        }
    }

    public boolean validateTime(String startTimeString, String endTimeString) {
        try {
            getTimeFormat().setLenient(false); // Disallow lenient parsing
            setStartTime(getTimeFormat().parse(startTimeString));
            setEndTime(getTimeFormat().parse(endTimeString));

            // Check if the end time is greater than the start time
            if (getEndTime().after(getStartTime())) {
                setStartTimeString(startTimeString);
                setEndTimeString(endTimeString);
                return true;
            } else {
                System.out.println("Ending time must be greater than starting time.\n");
                return false;
            }
        } catch (ParseException e) {
            System.out.println("Invalid time format. Please use 24-hour format.\n");
            return false;
        }
    }

    public boolean validateAlpha(String input) {
        if (!input.matches("^[a-zA-Z]+$")) {
            System.out.println("Invalid input. Please use only alphabetic characters.\n");
            return false;
        } else {
            return true;
        }
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("\nEvent Details:\n");
        sb.append("Event ID: ").append(getEventId()).append("\n");
        sb.append("Title: ").append(getTitle()).append("\n");
        sb.append("Date: ").append(getStartDateString()).append(" to ").append(getEndDateString()).append("\n");
        sb.append("Time: ").append(getStartTimeString()).append(" - ").append(getEndTimeString()).append("\n");
        sb.append("Venue: ").append(getVenue()).append("\n");
        sb.append("Industry: ").append(getIndustry()).append("\n");
        // Add more details here if needed
        return sb.toString();
    }

}
